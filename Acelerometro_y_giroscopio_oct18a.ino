#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Acelerometro y giroscopio"
  https://create.arduino.cc/cloud/things/46f8dcce-397a-4f0e-97ed-66967598b13c 

  The following variables are automatically generated and updated when changes are made to the Thing

  String acelerometro;
  String giroscopio;

  Para usar el ESP8266MOD es necesario configurar la conexion a internet previamente
*/

#include "thingProperties.h"
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
//Uso de Wire para conexion I2C, GPIO5 -> SCL, GPIO4 -> SDA
#include <Wire.h>

Adafruit_MPU6050 mpu;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  //Swith case para hace print del rango del acelerometro
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print("Accelerometer range set to: ");
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G:
    Serial.println("+-2G");
    break;
  case MPU6050_RANGE_4_G:
    Serial.println("+-4G");
    break;
  case MPU6050_RANGE_8_G:
    Serial.println("+-8G");
    break;
  case MPU6050_RANGE_16_G:
    Serial.println("+-16G");
    break;
  }
  //Swith case para hace print del rango de los angulos de rotacion
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print("Gyro range set to: ");
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG:
    Serial.println("+- 250 deg/s");
    break;
  case MPU6050_RANGE_500_DEG:
    Serial.println("+- 500 deg/s");
    break;
  case MPU6050_RANGE_1000_DEG:
    Serial.println("+- 1000 deg/s");
    break;
  case MPU6050_RANGE_2000_DEG:
    Serial.println("+- 2000 deg/s");
    break;
  }
  //Switch case para hacer print del rango del centro de frecuencia
  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  Serial.print("Filter bandwidth set to: ");
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ:
    Serial.println("260 Hz");
    break;
  case MPU6050_BAND_184_HZ:
    Serial.println("184 Hz");
    break;
  case MPU6050_BAND_94_HZ:
    Serial.println("94 Hz");
    break;
  case MPU6050_BAND_44_HZ:
    Serial.println("44 Hz");
    break;
  case MPU6050_BAND_21_HZ:
    Serial.println("21 Hz");
    break;
  case MPU6050_BAND_10_HZ:
    Serial.println("10 Hz");
    break;
  case MPU6050_BAND_5_HZ:
    Serial.println("5 Hz");
    break;
  }

  Serial.println("");
  delay(100);
}

void loop() {
  ArduinoCloud.update();
  // Llamar a la funcion para hacer las lecturas
  MPU6050_READ();
  
}

void MPU6050_READ(){
  /* Get new sensor events with the readings */
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Creacion de string ACELERACION para ser usado como variable de Arduino Cloud
  String accel="Aceleracion X:";
  accel.concat(a.acceleration.x);
  accel.concat(", Y: ");
  accel.concat(a.acceleration.y);
  accel.concat(", Z: ");
  accel.concat(a.acceleration.z);
  accel.concat(" m/s^2");

  Serial.println(accel);
  //Variable de Arduino Cloud, responde a cada cambio
  acelerometro = accel;

  // Creacion de string ROTACION para ser usado como variable de Arduino Cloud
  String rot="Rotation X: ";
  rot.concat(g.gyro.x);
  rot.concat(", Y: ");
  rot.concat(g.gyro.y);
  rot.concat(", Z: ");
  rot.concat(g.gyro.z);
  rot.concat(" rad/s");

  Serial.println(rot);
  //Variable de Arduino Cloud, responde a cada cambio
  giroscopio = rot;
  //Salgo de linea
  Serial.println("");
  delay(500);
}
